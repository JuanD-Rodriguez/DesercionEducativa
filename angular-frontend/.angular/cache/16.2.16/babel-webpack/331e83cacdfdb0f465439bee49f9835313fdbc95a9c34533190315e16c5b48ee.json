{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet EditarUsuarioComponent = class EditarUsuarioComponent {\n  fb;\n  usuarioService;\n  route;\n  router;\n  usuarioId = 0;\n  usuarioForm;\n  cargando = false;\n  errorMensaje = '';\n  exitoMensaje = '';\n  datosOriginales = {};\n  // Variables para búsqueda\n  terminoBusqueda = '';\n  resultadosBusqueda = [];\n  busquedaRealizada = false;\n  constructor(fb, usuarioService, route, router) {\n    this.fb = fb;\n    this.usuarioService = usuarioService;\n    this.route = route;\n    this.router = router;\n  }\n  ngOnInit() {\n    // Inicializar el formulario\n    this.usuarioForm = this.fb.group({\n      nombre: ['', Validators.required],\n      apellidos: ['', Validators.required],\n      correo: ['', [Validators.required, Validators.email]],\n      telefono: ['', [Validators.required, Validators.pattern(/^[0-9]{10}$/)]],\n      id_ingenieria: ['', Validators.required],\n      rol_id: [3, Validators.required] // Por defecto estudiante\n    });\n    // Obtener el ID del usuario de la ruta\n    this.route.params.subscribe(params => {\n      const id = +params['id'];\n      if (id && id > 0) {\n        this.usuarioId = id;\n        this.cargarDatosUsuario();\n      }\n    });\n  }\n  buscarUsuarios() {\n    if (!this.terminoBusqueda.trim()) {\n      this.resultadosBusqueda = [];\n      this.busquedaRealizada = false;\n      return;\n    }\n    this.cargando = true;\n    const termino = this.terminoBusqueda.toLowerCase();\n    this.usuarioService.getUsuarios().subscribe({\n      next: usuarios => {\n        this.resultadosBusqueda = usuarios.filter(usuario => usuario.nombre?.toLowerCase().includes(termino) || (usuario.apellido || '')?.toLowerCase().includes(termino) || (usuario.correo_electronico || usuario.correo || '')?.toLowerCase().includes(termino) || (usuario.id_usuario || usuario.id)?.toString().includes(termino)).map(usuario => {\n          // Asegurarnos de que cada usuario tenga id_usuario\n          if (!usuario.id_usuario && usuario.id) {\n            usuario.id_usuario = usuario.id;\n          }\n          return usuario;\n        });\n        this.busquedaRealizada = true;\n        this.cargando = false;\n        console.log('Resultados de búsqueda:', this.resultadosBusqueda);\n      },\n      error: error => {\n        console.error('Error al buscar usuarios:', error);\n        this.errorMensaje = 'Error al buscar usuarios. Por favor, intenta nuevamente.';\n        this.cargando = false;\n        this.busquedaRealizada = true;\n      }\n    });\n  }\n  seleccionarUsuario(id) {\n    console.log('Usuario seleccionado con ID:', id);\n    if (!id) {\n      this.errorMensaje = 'ID de usuario no válido';\n      return;\n    }\n    this.usuarioId = id;\n    this.cargarDatosUsuario();\n  }\n  cargarDatosUsuario() {\n    this.cargando = true;\n    console.log('Cargando datos del usuario con ID:', this.usuarioId);\n    this.usuarioService.getUsuario(this.usuarioId).subscribe({\n      next: usuario => {\n        // Guardar los datos originales\n        this.datosOriginales = usuario;\n        console.log('Datos de usuario recibidos:', usuario);\n        // Usar los datos dependiendo de su disponibilidad\n        this.usuarioForm.patchValue({\n          nombre: usuario.nombre || '',\n          apellidos: usuario.apellido || '',\n          correo: usuario.correo_electronico || usuario.correo || '',\n          telefono: usuario.telefono || '',\n          id_ingenieria: usuario.id_ingenieria || '',\n          rol_id: usuario.rol_id || usuario.id_rol || 3\n        });\n        this.cargando = false;\n      },\n      error: error => {\n        console.error('Error al cargar datos del usuario:', error);\n        this.errorMensaje = 'Error al cargar datos del usuario. Intente nuevamente.';\n        this.cargando = false;\n      }\n    });\n  }\n  onSubmit() {\n    if (this.usuarioForm.invalid) {\n      this.usuarioForm.markAllAsTouched();\n      return;\n    }\n    // Adaptar el formato para que coincida con lo que espera el backend\n    const datosActualizados = {\n      nombre: this.usuarioForm.value.nombre,\n      apellido: this.usuarioForm.value.apellidos,\n      correo: this.usuarioForm.value.correo,\n      correo_electronico: this.usuarioForm.value.correo,\n      telefono: this.usuarioForm.value.telefono,\n      id_ingenieria: this.usuarioForm.value.id_ingenieria,\n      rol_id: this.usuarioForm.value.rol_id,\n      contrasena: this.datosOriginales.contrasena || 'password123' // Mantenemos la contraseña original o usamos un valor predeterminado\n    };\n\n    console.log('Enviando actualización para usuario ID:', this.usuarioId);\n    console.log('Datos de actualización:', datosActualizados);\n    this.cargando = true;\n    this.usuarioService.actualizarUsuario(this.usuarioId, datosActualizados).subscribe({\n      next: () => {\n        this.exitoMensaje = 'Usuario actualizado exitosamente';\n        this.errorMensaje = '';\n        this.cargando = false;\n        // Redireccionar después de un breve retraso\n        setTimeout(() => {\n          this.router.navigate(['/admin/usuarios']);\n        }, 2000);\n      },\n      error: error => {\n        console.error('Error al actualizar usuario:', error);\n        this.errorMensaje = 'Error al actualizar el usuario. Intente nuevamente.';\n        this.exitoMensaje = '';\n        this.cargando = false;\n      }\n    });\n  }\n  cancelar() {\n    this.router.navigate(['/admin/usuarios']);\n  }\n};\nEditarUsuarioComponent = __decorate([Component({\n  selector: 'app-editar-usuario',\n  templateUrl: './editar-usuario.component.html',\n  styleUrls: ['./editar-usuario.component.css']\n})], EditarUsuarioComponent);\nexport { EditarUsuarioComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}