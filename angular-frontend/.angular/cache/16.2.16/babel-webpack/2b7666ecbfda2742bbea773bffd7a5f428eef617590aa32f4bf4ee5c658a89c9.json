{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nlet RoleGuard = /*#__PURE__*/(() => {\n  class RoleGuard {\n    authService;\n    router;\n    constructor(authService, router) {\n      this.authService = authService;\n      this.router = router;\n    }\n    canActivate(route, state) {\n      // Obtener roles permitidos de los datos de la ruta\n      const allowedRoles = route.data['roles'];\n      // Verificar si el usuario tiene uno de los roles permitidos\n      const userRole = this.authService.getUserRole();\n      if (userRole !== null && allowedRoles.includes(userRole)) {\n        return true;\n      }\n      // Si el usuario está logueado pero no tiene el rol adecuado,\n      // redirigir según su rol\n      if (this.authService.isLoggedIn()) {\n        this.authService.redirectBasedOnRole();\n      } else {\n        // Si no está logueado, redirigir al login\n        this.router.navigate(['/login']);\n      }\n      return false;\n    }\n    static ɵfac = function RoleGuard_Factory(t) {\n      return new (t || RoleGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RoleGuard,\n      factory: RoleGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return RoleGuard;\n})();\nexport { RoleGuard };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}