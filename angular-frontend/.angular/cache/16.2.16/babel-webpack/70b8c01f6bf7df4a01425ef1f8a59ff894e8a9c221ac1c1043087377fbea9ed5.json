{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet EliminarUsuarioComponent = class EliminarUsuarioComponent {\n  usuarioService;\n  router;\n  usuarios = [];\n  terminoBusqueda = '';\n  busquedaRealizada = false;\n  usuarioAEliminar = null;\n  mensajeExito = '';\n  mensajeError = '';\n  constructor(usuarioService, router) {\n    this.usuarioService = usuarioService;\n    this.router = router;\n  }\n  ngOnInit() {\n    // Inicialmente podemos cargar todos los usuarios\n    this.cargarUsuarios();\n  }\n  cargarUsuarios() {\n    this.usuarioService.getUsuarios().subscribe({\n      next: data => {\n        // Usar tipado 'any' para evitar errores con propiedades que no están en la interfaz\n        this.usuarios = data;\n        this.busquedaRealizada = true;\n        console.log('Usuarios cargados:', this.usuarios);\n      },\n      error: error => {\n        console.error('Error al cargar usuarios:', error);\n        this.mensajeError = 'Error al cargar la lista de usuarios. Por favor, intenta nuevamente.';\n      }\n    });\n  }\n  buscarUsuarios() {\n    if (!this.terminoBusqueda.trim()) {\n      this.cargarUsuarios();\n      return;\n    }\n    const termino = this.terminoBusqueda.toLowerCase();\n    this.usuarioService.getUsuarios().subscribe({\n      next: data => {\n        // Usar tipado 'any' para filtrar\n        const usuarios = data;\n        this.usuarios = usuarios.filter(usuario => usuario.nombre?.toLowerCase().includes(termino) || usuario.apellido?.toLowerCase().includes(termino) || (usuario.correo_electronico || usuario.correo || '')?.toLowerCase().includes(termino) || (usuario.id_usuario || usuario.id || '').toString().includes(termino));\n        this.busquedaRealizada = true;\n        console.log('Resultados de búsqueda:', this.usuarios);\n      },\n      error: error => {\n        console.error('Error en la búsqueda:', error);\n        this.mensajeError = 'Error al realizar la búsqueda. Por favor, intenta nuevamente.';\n      }\n    });\n  }\n  getTipoUsuario(id_rol) {\n    switch (id_rol) {\n      case 1:\n        return 'Administrador';\n      case 2:\n        return 'Gestor';\n      case 3:\n        return 'Estudiante';\n      default:\n        return 'Desconocido';\n    }\n  }\n  confirmarEliminar(usuario) {\n    this.usuarioAEliminar = usuario;\n    // Limpiamos cualquier mensaje previo\n    this.mensajeExito = '';\n    this.mensajeError = '';\n  }\n  cancelarEliminar() {\n    this.usuarioAEliminar = null;\n  }\n  eliminarUsuario() {\n    if (!this.usuarioAEliminar) return;\n    // Usar el ID disponible, ya sea id_usuario o id\n    const idUsuario = this.usuarioAEliminar.id_usuario || this.usuarioAEliminar.id;\n    if (!idUsuario) {\n      this.mensajeError = 'No se puede eliminar el usuario porque no tiene ID.';\n      this.usuarioAEliminar = null;\n      return;\n    }\n    console.log('Eliminando usuario con ID:', idUsuario);\n    this.usuarioService.eliminarUsuario(idUsuario).subscribe({\n      next: () => {\n        this.mensajeExito = `El usuario ${this.usuarioAEliminar.nombre} ha sido eliminado correctamente.`;\n        this.usuarios = this.usuarios.filter(u => (u.id_usuario || u.id) !== idUsuario);\n        this.usuarioAEliminar = null;\n        // Si ya no quedan usuarios en la lista después de filtrar, actualizar la bandera\n        if (this.usuarios.length === 0) {\n          this.busquedaRealizada = true;\n        }\n      },\n      error: error => {\n        console.error('Error al eliminar usuario:', error);\n        this.mensajeError = 'Error al eliminar el usuario. Por favor, intenta nuevamente.';\n        this.usuarioAEliminar = null;\n      }\n    });\n  }\n};\nEliminarUsuarioComponent = __decorate([Component({\n  selector: 'app-eliminar-usuario',\n  templateUrl: './eliminar-usuario.component.html',\n  styleUrls: ['./eliminar-usuario.component.css']\n})], EliminarUsuarioComponent);\nexport { EliminarUsuarioComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}