{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet FormularioService = /*#__PURE__*/(() => {\n  class FormularioService {\n    http;\n    apiUrl = `${environment.apiUrl}/formulario`;\n    constructor(http) {\n      this.http = http;\n    }\n    /**\n     * Obtiene todos los formularios\n     * @returns Observable con la lista de formularios\n     */\n    obtenerFormularios() {\n      return this.http.get(`${this.apiUrl}/listar`);\n    }\n    /**\n     * Obtiene un formulario específico por su ID\n     * @param id ID del formulario\n     * @returns Observable con el detalle del formulario\n     */\n    obtenerFormulario(id) {\n      return this.http.get(`${this.apiUrl}/${id}`);\n    }\n    /**\n     * Crea un nuevo formulario\n     * @param formulario Datos del formulario a crear\n     * @returns Observable con la respuesta del servidor\n     */\n    crearFormulario(formulario) {\n      return this.http.post(`${this.apiUrl}/crear`, formulario);\n    }\n    /**\n     * Actualiza un formulario existente\n     * @param id ID del formulario a actualizar\n     * @param formulario Datos actualizados del formulario\n     * @returns Observable con la respuesta del servidor\n     */\n    actualizarFormulario(id, formulario) {\n      return this.http.put(`${this.apiUrl}/${id}`, formulario);\n    }\n    /**\n     * Elimina un formulario\n     * @param id ID del formulario a eliminar\n     * @returns Observable con la respuesta del servidor\n     */\n    eliminarFormulario(id) {\n      return this.http.delete(`${this.apiUrl}/${id}`);\n    }\n    /**\n     * Obtiene las respuestas de un formulario\n     * @param id ID del formulario\n     * @returns Observable con las respuestas del formulario\n     */\n    obtenerRespuestas(id) {\n      return this.http.get(`${this.apiUrl}/${id}/respuestas`);\n    }\n    /**\n     * Activa o desactiva un formulario\n     * @param id ID del formulario\n     * @param estado Nuevo estado (true = activo, false = inactivo)\n     * @returns Observable con la respuesta del servidor\n     */\n    cambiarEstado(id, estado) {\n      return this.http.put(`${this.apiUrl}/${id}/estado`, {\n        activo: estado\n      });\n    }\n    static ɵfac = function FormularioService_Factory(t) {\n      return new (t || FormularioService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FormularioService,\n      factory: FormularioService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return FormularioService;\n})();\nexport { FormularioService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}