{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nlet TokenInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptor {\n    router;\n    constructor(router) {\n      this.router = router;\n    }\n    intercept(req, next) {\n      const token = localStorage.getItem('token');\n      if (token) {\n        req = req.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n      return next.handle(req).pipe(catchError(error => {\n        if (error.status === 401) {\n          // Si recibimos un 401, el token no es válido o ha expirado\n          console.log('Token inválido o expirado. Redirigiendo al login...');\n          localStorage.removeItem('token');\n          this.router.navigate(['/login']);\n        }\n        return throwError(() => error);\n      }));\n    }\n    static ɵfac = function TokenInterceptor_Factory(t) {\n      return new (t || TokenInterceptor)(i0.ɵɵinject(i1.Router));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TokenInterceptor,\n      factory: TokenInterceptor.ɵfac\n    });\n  }\n  return TokenInterceptor;\n})();\nexport { TokenInterceptor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}