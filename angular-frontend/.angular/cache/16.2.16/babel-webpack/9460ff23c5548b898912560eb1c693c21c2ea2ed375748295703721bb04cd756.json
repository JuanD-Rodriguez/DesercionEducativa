{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet MensajesComponent = class MensajesComponent {\n  comunicacionService;\n  usuarioService;\n  fb;\n  // Variables para mensajes\n  mensajesRecibidos = [];\n  mensajesEnviados = [];\n  // Estados\n  cargandoRecibidos = true;\n  cargandoEnviados = true;\n  vistaActiva = 'recibidos'; // 'recibidos' o 'enviados'\n  mostrarNuevoMensaje = false;\n  // Estudiantes para enviar mensajes\n  estudiantes = [];\n  // Variables para el formulario de nuevo mensaje\n  formularioMensaje;\n  constructor(comunicacionService, usuarioService, fb) {\n    this.comunicacionService = comunicacionService;\n    this.usuarioService = usuarioService;\n    this.fb = fb;\n    this.formularioMensaje = this.fb.group({\n      destinatario: ['', Validators.required],\n      asunto: ['', Validators.required],\n      contenido: ['', Validators.required]\n    });\n  }\n  ngOnInit() {\n    this.cargarMensajesRecibidos();\n    this.cargarMensajesEnviados();\n    this.cargarEstudiantes();\n  }\n  cargarMensajesRecibidos() {\n    this.cargandoRecibidos = true;\n    this.comunicacionService.obtenerMensajesRecibidos().subscribe({\n      next: data => {\n        this.mensajesRecibidos = data;\n        this.cargandoRecibidos = false;\n      },\n      error: err => {\n        console.error('Error al cargar mensajes recibidos:', err);\n        this.cargandoRecibidos = false;\n      }\n    });\n  }\n  cargarMensajesEnviados() {\n    this.cargandoEnviados = true;\n    this.comunicacionService.obtenerMensajesEnviados().subscribe({\n      next: data => {\n        this.mensajesEnviados = data;\n        this.cargandoEnviados = false;\n      },\n      error: err => {\n        console.error('Error al cargar mensajes enviados:', err);\n        this.cargandoEnviados = false;\n      }\n    });\n  }\n  cargarEstudiantes() {\n    this.usuarioService.getUsuarios().subscribe({\n      next: data => {\n        // Filtrar solo estudiantes\n        this.estudiantes = data.filter(usuario => usuario.id_rol === 3);\n      },\n      error: err => {\n        console.error('Error al cargar estudiantes:', err);\n      }\n    });\n  }\n  cambiarVista(vista) {\n    this.vistaActiva = vista;\n  }\n  marcarComoLeido(idMensaje) {\n    this.comunicacionService.marcarComoLeido(idMensaje).subscribe({\n      next: () => {\n        // Actualizar el estado del mensaje en la lista\n        const mensaje = this.mensajesRecibidos.find(m => m.id_mensaje === idMensaje);\n        if (mensaje) {\n          mensaje.leido = true;\n        }\n      },\n      error: err => {\n        console.error('Error al marcar como leído:', err);\n      }\n    });\n  }\n  toggleNuevoMensaje() {\n    this.mostrarNuevoMensaje = !this.mostrarNuevoMensaje;\n    // Resetear formulario al abrir\n    if (this.mostrarNuevoMensaje) {\n      this.formularioMensaje.reset();\n    }\n  }\n  enviarMensaje() {\n    if (this.formularioMensaje.invalid) {\n      return;\n    }\n    const {\n      destinatario,\n      asunto,\n      contenido\n    } = this.formularioMensaje.value;\n    this.comunicacionService.enviarMensaje(destinatario, asunto, contenido).subscribe({\n      next: () => {\n        // Recargar mensajes enviados y ocultar formulario\n        this.cargarMensajesEnviados();\n        this.mostrarNuevoMensaje = false;\n        // Mostrar mensaje de éxito\n        alert('Mensaje enviado con éxito');\n      },\n      error: err => {\n        console.error('Error al enviar mensaje:', err);\n        alert('Error al enviar mensaje: ' + err.message);\n      }\n    });\n  }\n};\nMensajesComponent = __decorate([Component({\n  selector: 'app-mensajes',\n  templateUrl: './mensajes.component.html',\n  styleUrls: ['./mensajes.component.css']\n})], MensajesComponent);\nexport { MensajesComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}