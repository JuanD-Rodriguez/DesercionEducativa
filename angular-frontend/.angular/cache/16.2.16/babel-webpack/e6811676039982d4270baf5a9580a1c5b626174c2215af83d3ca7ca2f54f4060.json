{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet ComunicacionService = /*#__PURE__*/(() => {\n  class ComunicacionService {\n    http;\n    apiUrl = 'http://localhost:5000/api/comunicacion';\n    constructor(http) {\n      this.http = http;\n    }\n    enviarMensaje(destinatario, asunto, contenido) {\n      return this.http.post(`${this.apiUrl}/enviar`, {\n        id_destinatario: destinatario,\n        asunto,\n        contenido\n      });\n    }\n    obtenerMensajesRecibidos() {\n      return this.http.get(`${this.apiUrl}/recibidos`);\n    }\n    obtenerMensajesEnviados() {\n      return this.http.get(`${this.apiUrl}/enviados`);\n    }\n    marcarComoLeido(idMensaje) {\n      return this.http.put(`${this.apiUrl}/marcar_leido/${idMensaje}`, {});\n    }\n    obtenerMensaje(idMensaje) {\n      return this.http.get(`${this.apiUrl}/mensaje/${idMensaje}`);\n    }\n    // Añade este método para resolver el error\n    obtenerMensajesEstudiante() {\n      // Por ahora devolvemos un array vacío simulado\n      // Más adelante puedes implementar la llamada real a la API\n      return of([]);\n      // Cuando implementes el endpoint en el backend, puedes usar:\n      // return this.http.get<any[]>(`${this.apiUrl}/estudiante/mensajes`);\n    }\n\n    static ɵfac = function ComunicacionService_Factory(t) {\n      return new (t || ComunicacionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ComunicacionService,\n      factory: ComunicacionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ComunicacionService;\n})();\nexport { ComunicacionService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}