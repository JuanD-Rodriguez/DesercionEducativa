{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet FormularioService = /*#__PURE__*/(() => {\n  class FormularioService {\n    http;\n    apiUrl = 'http://localhost:5000/formulario';\n    constructor(http) {\n      this.http = http;\n    }\n    /**\n     * Obtiene todos los formularios\n     */\n    obtenerFormularios() {\n      return this.http.get(`${this.apiUrl}/formularios`);\n    }\n    /**\n     * Obtiene un formulario específico por su ID\n     */\n    obtenerFormulario(id) {\n      return this.http.get(`${this.apiUrl}/formularios/${id}`);\n    }\n    /**\n     * Crea un nuevo formulario con preguntas\n     */\n    crearFormulario(formulario) {\n      const token = localStorage.getItem('token');\n      const preguntasTransformadas = formulario.preguntas.map(p => {\n        const preguntaTransformada = {\n          texto: p.textoPregunta || p.texto || '',\n          categoria: p.categoria || 'academico'\n        };\n        const tiposConOpciones = ['opciones_multiple', 'opcion', 'opcion_unica', 'desplegable'];\n        if (tiposConOpciones.includes(p.tipoPregunta)) {\n          const opcionesValidas = (p.opciones || []).map(o => o.textoOpcion?.trim()).filter(t => t && t.length > 0);\n          if (opcionesValidas.length === 0) {\n            throw new Error(`La pregunta \"${p.textoPregunta}\" requiere al menos una opción válida.`);\n          }\n          preguntaTransformada.opciones = opcionesValidas;\n        }\n        return preguntaTransformada;\n      });\n      const datos = {\n        titulo: formulario.nombre || formulario.titulo || '',\n        descripcion: formulario.descripcion || '',\n        preguntas: preguntasTransformadas\n      };\n      const headers = new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      });\n      return this.http.post(`${this.apiUrl}/crear`, datos, {\n        headers\n      }).pipe(catchError(err => {\n        console.error('[ERROR al crear formulario]', err);\n        return throwError(() => new Error(err.error?.error || 'Error al crear formulario'));\n      }));\n    }\n    /**\n     * Elimina un formulario\n     */\n    eliminarFormulario(id) {\n      return this.http.delete(`${this.apiUrl}/formularios/${id}`);\n    }\n    /**\n     * Activa o desactiva un formulario\n     */\n    cambiarEstado(id, estado) {\n      return this.http.put(`${this.apiUrl}/formularios/${id}/estado`, {\n        activo: estado\n      });\n    }\n    /**\n     * Obtiene las preguntas de un formulario\n     */\n    getPreguntas(idFormulario) {\n      let url = `${this.apiUrl}/preguntas`;\n      if (idFormulario) {\n        url += `?id_formulario=${idFormulario}`;\n      }\n      return this.http.get(url);\n    }\n    /**\n     * Envía las respuestas de un estudiante\n     */\n    enviarRespuestas(respuestas) {\n      return this.http.post(`${this.apiUrl}/respuestas`, {\n        respuestas\n      });\n    }\n    /**\n     * Obtiene las respuestas de un formulario\n     */\n    obtenerRespuestas(id) {\n      return this.http.get(`${this.apiUrl}/respuestas/formulario/${id}`);\n    }\n    static ɵfac = function FormularioService_Factory(t) {\n      return new (t || FormularioService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FormularioService,\n      factory: FormularioService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return FormularioService;\n})();\nexport { FormularioService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}