{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet FormularioService = /*#__PURE__*/(() => {\n  class FormularioService {\n    http;\n    apiUrl = 'http://localhost:5000/formulario';\n    constructor(http) {\n      this.http = http;\n    }\n    /**\n     * Obtiene todos los formularios\n     * @returns Observable con la lista de formularios\n     */\n    obtenerFormularios() {\n      return this.http.get(`${this.apiUrl}/formularios`);\n    }\n    /**\n     * Obtiene un formulario específico por su ID\n     * @param id ID del formulario\n     * @returns Observable con el detalle del formulario\n     */\n    obtenerFormulario(id) {\n      return this.http.get(`${this.apiUrl}/formularios/${id}`);\n    }\n    /**\n     * Crea un nuevo formulario\n     * @param formulario Datos del formulario a crear\n     * @returns Observable con la respuesta del servidor\n     */\n    crearFormulario(formulario) {\n      return new Observable(observer => {\n        // Datos absolutamente mínimos\n        const datos = {\n          titulo: \"Test\",\n          preguntas: [{\n            texto: \"Test\",\n            categoria: \"academico\"\n          }]\n        };\n        // Usar Fetch API para evitar problemas con HttpClient\n        const token = localStorage.getItem('token');\n        fetch('http://localhost:5000/formulario/crear', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify(datos)\n        }).then(response => {\n          if (!response.ok) {\n            throw new Error(`Error HTTP: ${response.status}`);\n          }\n          return response.json();\n        }).then(data => {\n          observer.next(data);\n          observer.complete();\n        }).catch(error => {\n          console.error('Error en fetch:', error);\n          observer.error(error);\n        });\n      });\n    }\n    /**\n     * Elimina un formulario\n     * @param id ID del formulario a eliminar\n     * @returns Observable con la respuesta del servidor\n     */\n    eliminarFormulario(id) {\n      return this.http.delete(`${this.apiUrl}/formularios/${id}`);\n    }\n    /**\n     * Activa o desactiva un formulario\n     * @param id ID del formulario\n     * @param estado Nuevo estado (true = activo, false = inactivo)\n     * @returns Observable con la respuesta del servidor\n     */\n    cambiarEstado(id, estado) {\n      return this.http.put(`${this.apiUrl}/formularios/${id}/estado`, {\n        activo: estado\n      });\n    }\n    /**\n     * Obtiene las preguntas de un formulario\n     * @param idFormulario ID del formulario (opcional)\n     * @returns Observable con las preguntas\n     */\n    getPreguntas(idFormulario) {\n      let url = `${this.apiUrl}/preguntas`;\n      if (idFormulario) {\n        url += `?id_formulario=${idFormulario}`;\n      }\n      return this.http.get(url);\n    }\n    /**\n     * Envía las respuestas de un estudiante a un formulario\n     * @param respuestas Respuestas del estudiante\n     * @returns Observable con la respuesta del servidor\n     */\n    enviarRespuestas(respuestas) {\n      return this.http.post(`${this.apiUrl}/respuestas`, {\n        respuestas\n      });\n    }\n    /**\n     * Obtiene las respuestas de un formulario\n     * @param id ID del formulario\n     * @returns Observable con las respuestas del formulario\n     */\n    obtenerRespuestas(id) {\n      return this.http.get(`${this.apiUrl}/respuestas/formulario/${id}`);\n    }\n    static ɵfac = function FormularioService_Factory(t) {\n      return new (t || FormularioService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: FormularioService,\n      factory: FormularioService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return FormularioService;\n})();\nexport { FormularioService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}