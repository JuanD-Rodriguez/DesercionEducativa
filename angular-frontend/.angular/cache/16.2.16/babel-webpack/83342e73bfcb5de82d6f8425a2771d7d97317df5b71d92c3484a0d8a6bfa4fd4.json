{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet UsuarioService = /*#__PURE__*/(() => {\n  class UsuarioService {\n    http;\n    apiUrl = 'http://localhost:5000/usuarios';\n    constructor(http) {\n      this.http = http;\n    }\n    // Headers HTTP para las peticiones\n    httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      })\n    };\n    // Manejador de errores HTTP\n    handleError(error) {\n      let errorMessage = 'Ocurrió un error desconocido';\n      if (error.error instanceof ErrorEvent) {\n        // Error del lado del cliente\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Error del lado del servidor\n        errorMessage = `Código de estado: ${error.status}, Mensaje: ${error.message}`;\n        // Si el servidor devuelve un mensaje de error personalizado\n        if (error.error && typeof error.error === 'object' && error.error.mensaje) {\n          errorMessage = error.error.mensaje;\n        }\n      }\n      console.error('Error en la petición HTTP:', error);\n      console.error('Mensaje de error:', errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }\n    getUsuarios() {\n      return this.http.get(`${this.apiUrl}/estudiantes`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n    }\n    getUsuario(id) {\n      return this.http.get(`${this.apiUrl}/estudiante/${id}`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n    }\n    crearUsuario(usuario) {\n      // Adaptar el objeto a la estructura que espera el backend\n      const datosParaBackend = {\n        tipo: \"estudiante\",\n        nombre: usuario.nombre,\n        apellido: usuario.apellido || usuario.apellidos,\n        correo_electronico: usuario.correo,\n        id_ingenieria: usuario.id_ingenieria,\n        telefono: usuario.telefono,\n        contrasena: usuario.contrasena\n      };\n      console.log('Datos enviados al servidor:', datosParaBackend);\n      // Usamos la ruta correcta '/crear' que vimos en el backend\n      return this.http.post(`${this.apiUrl}/crear`, datosParaBackend, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    actualizarUsuario(id, usuario) {\n      console.log(`Actualizando usuario con ID ${id}:`, usuario);\n      if (!id) {\n        console.error('ID de usuario no definido en actualizarUsuario');\n        return throwError(() => new Error('ID de usuario no definido'));\n      }\n      return this.http.put(`${this.apiUrl}/actualizar/${id}`, usuario, this.httpOptions).pipe(catchError(this.handleError));\n    }\n    eliminarUsuario(id) {\n      console.log(`Eliminando usuario con ID ${id}`);\n      if (!id) {\n        console.error('ID de usuario no definido en eliminarUsuario');\n        return throwError(() => new Error('ID de usuario no definido'));\n      }\n      // Volver a la ruta original pero sin withCredentials\n      return this.http.delete(`${this.apiUrl}/eliminar/${id}`, {\n        headers: this.httpOptions.headers\n      }).pipe(catchError(this.handleError));\n    }\n    obtenerIngenierias() {\n      return this.http.get(`${this.apiUrl}/ingenierias`, this.httpOptions).pipe(retry(1), catchError(this.handleError));\n    }\n    static ɵfac = function UsuarioService_Factory(t) {\n      return new (t || UsuarioService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UsuarioService,\n      factory: UsuarioService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return UsuarioService;\n})();\nexport { UsuarioService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}