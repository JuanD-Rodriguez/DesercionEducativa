{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nlet AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    http;\n    router;\n    // URL base para las peticiones de autenticación\n    apiUrl = 'http://localhost:5000/auth';\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n    }\n    login(usuario, contrasena) {\n      return this.http.post(`${this.apiUrl}/login`, {\n        nombre_usuario: usuario,\n        contrasena: contrasena\n      }).pipe(tap(res => localStorage.setItem('token', res.access_token)));\n    }\n    logout() {\n      localStorage.removeItem('token');\n      this.router.navigate(['/login']);\n    }\n    isLoggedIn() {\n      const token = localStorage.getItem('token');\n      return !!token; // Simplificado por ahora\n    }\n    // Método para decodificar el token y obtener el rol del usuario\n    getUserRole() {\n      const token = localStorage.getItem('token');\n      if (!token) return null;\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        return payload.rol;\n      } catch (error) {\n        console.error('Error al decodificar el token', error);\n        return null;\n      }\n    }\n    // Método para redirigir según el rol del usuario\n    redirectBasedOnRole() {\n      const role = this.getUserRole();\n      switch (role) {\n        case 1:\n          // Admin\n          this.router.navigate(['/admin']);\n          break;\n        case 2:\n          // Gestor\n          this.router.navigate(['/gestor']);\n          break;\n        case 3:\n          // Estudiante\n          this.router.navigate(['/formulario-desercion']); // O la ruta principal para estudiantes\n          break;\n        default:\n          // Si no se puede determinar el rol o hay algún problema\n          this.router.navigate(['/login']);\n          break;\n      }\n    }\n    enviarCodigo(correo) {\n      return this.http.post(`${this.apiUrl}/recuperar`, {\n        correo\n      });\n    }\n    verificarCodigo(correo, codigo) {\n      return this.http.post(`${this.apiUrl}/verificar-codigo`, {\n        correo,\n        codigo\n      });\n    }\n    restablecerContrasena(correo, nueva_contrasena) {\n      return this.http.post(`${this.apiUrl}/restablecer-contrasena`, {\n        correo,\n        nueva_contrasena\n      });\n    }\n    static ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthService;\n})();\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}